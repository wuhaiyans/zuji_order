<?php

/**
 * Xxx (文件声明)
 * @access public （访问修饰符）
 * @author liuhongxing <liuhongxing@huishoubao.com.cn>
 * @copyright (c) 2017, Huishoubao
 * 
 */

/**
 * Xxx 控制器（类名称）
 * @access public （访问修饰符）
 * @author liuhongxing <liuhongxing@huishoubao.com.cn>
 */
class ClassName{
    
    /**
     * Xxxx （入口方法名称）
     * @param [参数类型]    $name   【必须/可选】（参数描述）
     * @access public （访问修饰符）
     * @author liuhongxing <liuhongxing@huishoubao.com.cn>
     * @return null
     */
    public function __construct($name) {
	;
    }
    
    /**
     * Xxxx （入口方法名称）
     * @param [参数类型]    $name1	【必须】（参数描述）
     * @param [参数类型]    $name2	【必须】（参数描述）
     * @param [参数类型]    $name3	【可选】默认值：xxx（声明默认值）；（参数描述）
     * @access public （访问修饰符）
     * @author liuhongxing <liuhongxing@huishoubao.com.cn>
     * @return [返回值类型]  [返回值描述]
     */
    public function action( $name1,$name1,$name3='' ){
	
	//-+--------------------------------------------------------------------
	// | 接收请求（直接使用$_GET或$_POST接收时，可以省略）
	//-+--------------------------------------------------------------------
	// todo
	
	//-+--------------------------------------------------------------------
	// | 参数校验（必须）
	//-+--------------------------------------------------------------------
	// todo
	
	//-+--------------------------------------------------------------------
	// | 业务访问限制（无业务限制时，可以省略）
	//-+--------------------------------------------------------------------
	// todo
	
	//-+--------------------------------------------------------------------
	// | 业务处理（根据请求参数，进行相应的业务处理）
	//-+--------------------------------------------------------------------
	// todo（调用业务相关的接口，进行逻辑组合）
	// 1）（做什么，获取什么值）
	// 2）（做什么，获取什么值）
	// 3）（做什么，获取什么值）
	// ...
	// 4）（获取到业务处理最后结果）
	
	//-+--------------------------------------------------------------------
	// | 业务结果返回
	//-+--------------------------------------------------------------------
	// todo （返回结果）(如果需要，就对业务处理结果进行格式化处理)
    }
    //
    // @param 常用分析
    // 1）具体类型 
    //	    @params int	    $name	【必须/可选】（描述）
    //	    @params string  $name	【必须/可选】（描述）
    //	    @params boolean $name	【必须/可选】（描述）
    //	    @params array   $name	【必须/可选】（描述）
    //	    @params [类]    $name	【必须/可选】（描述）
    // 2）混合类型:
    //	    @params mixed    array|int	       
    //	    @params mixed    array|string
    // 3）良好习惯
    //	    当入参列表有多个时，最好选择 关联数组 的形式 传递参数，方便以后的扩张，减少对方法的声明的修改
    //	    例如：一个方法需要的参数如下：
    //	    @params int	    $id		【必须】用户ID
    //	    @params string  $username	【必须】用户名
    //	    @params string  $tel	【可选】联系方式
    //	    @params string  $address	【可选】联系地址
    //	    可以修改为：
    //	    @params array   $userInfo   【必须】用户信息
    //	    array(
    //		'id' => '',		//【必须】用户ID
    //		'username' => '',	//【必须】用户名
    //		'tel' => '',		//【可选】联系方式
    //		'address' => '',	//【可选】联系地址
    //	    )
    //	    【注意：】
    //	    1）接口不负责校验参数，接口只承诺：如果按照声明调用，就可以处理相应的业务，并返回预期的结果
    //	    2）要求调用方法的程序，做参数校验，然后再调用
    //	    
    // @return 常用分析
    // 1）具体类型
    // 2）混合类型：
    //	    @return mixed   boolean|array   array：成功（注明具体格式）；false：失败
    //		如果返回值为关联数组，必须注明数组的键名称和值的约束
    //		例如：array(
    //		    'key1' => 'ABC'， //【必须】（描述）
    //		    'key2' => 'xxx'，   //【可选】，默认值：xxx；（描述）
    //		    'key1' => array()， //【必须】（描述）
    //		)
    //	    @return mixed   boolean|int	    int：成功（注明int取值范围）；false：失败
    
    
}
